import { ChangeEvent, useState } from 'react';
import { BIP32Interface } from 'bip32';
import { getChildPublicKey, getMasterPrivateKey, getMnemonic, getXpubFromPrivateKey } from '../utils/bitcoin-utils';
import { deriveDescriptorAddress } from '../utils/descriptors';
import { useToast } from '@chakra-ui/react';

const useExternalKeysHook = () => {
    const [pubkeys, setPubkeys] = useState({ pubkey1: '', pubkey2: '' });
    const [functionModerator, setFunctionModerator] = useState({ isLoading: false, error: '' });

    const { pubkey1, pubkey2 } = pubkeys;
    const { error, isLoading } = functionModerator;
    const toast = useToast();

    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {
        event.preventDefault();

        setPubkeys((pubkey) => ({ ...pubkey, [event.target.name]: event.target.value }));
    };

    const getSystemPublicKey = async () => {
        // check for public key checking algorithm
        setFunctionModerator({ ...functionModerator, isLoading: true });
        if (pubkey1.length === 0) {
            setFunctionModerator({ ...functionModerator, isLoading: false, error: 'Your first public key cannot be empty' });
            return;
        }
        if (pubkey2.length === 0) {
            setFunctionModerator({ ...functionModerator, isLoading: false, error: 'Your second public key cannot be empty' });
            return;
        }

        try {
            // get system mnemonic
            const mnemonic = getMnemonic();

            // get system private key
            const privateKey = await getMasterPrivateKey(mnemonic);

            if (privateKey) {
                // generate extended public key
                const derivationPath = "m/84'/0'/0'"; // P2WPKH
                const getXpub = getXpubFromPrivateKey(privateKey, derivationPath);

                // get child public keys
                const path = `0/1`;
                const childPublicKey = getChildPublicKey(getXpub, path);
                setFunctionModerator({ ...functionModerator, isLoading: false, error: '' });

                return childPublicKey;
            } else {
                setFunctionModerator({ ...functionModerator, isLoading: false, error: 'no private key was found' });
            }
        } catch (error) {
            setFunctionModerator({ ...functionModerator, error: '', isLoading: false });
            console.log(error);
            throw error;
        }
    };

    const generateWallet = async () => {
        /*** generate system key ***/
        const generateSysPubKey: BIP32Interface | undefined = await getSystemPublicKey();

        if (generateSysPubKey) {
            return toast({
                title: 'System public key generated.',
                description: 'Your system public key has been generated...setting up your address',
                status: 'success',
                duration: 3000,
                isClosable: true,
            });
        }

        setFunctionModerator({ ...functionModerator, isLoading: true });
        if (!generateSysPubKey) {
            setFunctionModerator({ ...functionModerator, isLoading: false, error: `No key was generated by the system` });
            return;
        }

        // generate descriptor address
        const descriptAddr = deriveDescriptorAddress([Buffer.from(pubkey1), Buffer.from(pubkey2)], generateSysPubKey!);

        setFunctionModerator({ ...functionModerator, isLoading: false });
        if (descriptAddr) {
            return toast({
                title: 'Descriptor address generated.',
                description: 'All set your, your account will be ready in 1..2..3',
                status: 'success',
                duration: 3000,
                isClosable: true,
            });
        }
        return descriptAddr;
    };

    return {
        pubkey1,
        pubkey2,
        error,
        isLoading,
        setPubkeys,
        generateWallet,
        handleInputChange,
    };
};

export default useExternalKeysHook;
